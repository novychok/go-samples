// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/novychok/go-samples/mongorepo/internal/repository (interfaces: FeatureFlag)

// Package feature_flag is a generated GoMock package.
package feature_flag

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	entity "github.com/novychok/go-samples/mongorepo/internal/entity"
)

// MockFeatureFlag is a mock of FeatureFlag interface.
type MockFeatureFlag struct {
	ctrl     *gomock.Controller
	recorder *MockFeatureFlagMockRecorder
}

// MockFeatureFlagMockRecorder is the mock recorder for MockFeatureFlag.
type MockFeatureFlagMockRecorder struct {
	mock *MockFeatureFlag
}

// NewMockFeatureFlag creates a new mock instance.
func NewMockFeatureFlag(ctrl *gomock.Controller) *MockFeatureFlag {
	mock := &MockFeatureFlag{ctrl: ctrl}
	mock.recorder = &MockFeatureFlagMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeatureFlag) EXPECT() *MockFeatureFlagMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockFeatureFlag) Create(arg0 context.Context, arg1 *entity.FeatureFlag) (entity.FeatureFlagID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(entity.FeatureFlagID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockFeatureFlagMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFeatureFlag)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockFeatureFlag) Delete(arg0 context.Context, arg1 entity.FeatureFlagID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockFeatureFlagMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockFeatureFlag)(nil).Delete), arg0, arg1)
}

// FindAll mocks base method.
func (m *MockFeatureFlag) FindAll(arg0 context.Context) ([]*entity.FeatureFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0)
	ret0, _ := ret[0].([]*entity.FeatureFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAll indicates an expected call of FindAll.
func (mr *MockFeatureFlagMockRecorder) FindAll(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockFeatureFlag)(nil).FindAll), arg0)
}

// GetByID mocks base method.
func (m *MockFeatureFlag) GetByID(arg0 context.Context, arg1 entity.FeatureFlagID) (*entity.FeatureFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", arg0, arg1)
	ret0, _ := ret[0].(*entity.FeatureFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID.
func (mr *MockFeatureFlagMockRecorder) GetByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockFeatureFlag)(nil).GetByID), arg0, arg1)
}

// Update mocks base method.
func (m *MockFeatureFlag) Update(arg0 context.Context, arg1 entity.FeatureFlagID, arg2 *entity.FeatureFlagUpsert) (*entity.FeatureFlag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(*entity.FeatureFlag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockFeatureFlagMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFeatureFlag)(nil).Update), arg0, arg1, arg2)
}

// UpdateStatus mocks base method.
func (m *MockFeatureFlag) UpdateStatus(arg0 context.Context, arg1 entity.FeatureFlagID, arg2 *entity.Toggle) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockFeatureFlagMockRecorder) UpdateStatus(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockFeatureFlag)(nil).UpdateStatus), arg0, arg1, arg2)
}
